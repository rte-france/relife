from typing import Generic, Literal, Optional, Self, Union, overload, TypeVar

import numpy as np
from numpy.typing import NDArray

from relife._io_types import _IntOrFloatValues, _AdditionalIntOrFloatValues

__all__ = ["ParametricModel", "FrozenParametricModel", "get_nb_assets", "is_frozen"]

class _Parameters:
    parent: Optional[Self]
    _leaves = dict[str, Self]
    _mapping = dict[str, float]
    _all_values: tuple[float, ...]
    _all_names: tuple[str, ...]

    def __init__(self, **kwargs: Optional[float]) -> None: ...
    @property
    def all_names(self) -> tuple[str, ...]: ...
    @property
    def all_values(self) -> tuple[float, ...]: ...
    @property
    def size(self) -> int: ...
    def set_leaf(self, leaf_name: str, leaf: _Parameters) -> None: ...
    def set_all_values(self, values: tuple[float, ...]) -> None: ...
    def __getitem__(self, name: str) -> float: ...
    def update_tree(self) -> None: ...

class ParametricModel:
    _params: _Parameters

    def __init__(self, **kwparams: Optional[float]) -> None: ...
    @property
    def params(self) -> NDArray[np.float64]: ...
    # noinspection PyUnresolvedReferences
    @params.setter
    def params(self, new_params: NDArray[np.float64]): ...
    @property
    def params_names(self) -> tuple[str, ...]: ...
    @property
    def nb_params(self) -> int: ...

_M = TypeVar("_M", bound=ParametricModel)  # Can be any subtype of ParametricModel

class FrozenParametricModel(ParametricModel, Generic[_M, *_AdditionalIntOrFloatValues]):
    _nb_assets: int
    _args: tuple[_IntOrFloatValues, ...]
    _unfrozen_model: ParametricModel
    def __init__(self, model: ParametricModel, *args: _IntOrFloatValues) -> None: ...
    def unfreeze(self) -> _M: ...
    @property
    def nb_assets(self) -> int: ...
    @property
    def args(self) -> tuple[_IntOrFloatValues, ...]: ...
    @args.setter
    def args(self, value: tuple[_IntOrFloatValues, ...]) -> None: ...

@overload
def is_frozen(model: FrozenParametricModel) -> Literal[True]: ...
@overload
def is_frozen(model: ParametricModel) -> Literal[False]: ...
def is_frozen(model: Union[ParametricModel, FrozenParametricModel]) -> bool: ...
def get_nb_assets(*args: float | NDArray[np.float64]) -> int: ...
