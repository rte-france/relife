{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4d80985f-ddc4-47ce-b93c-b62d9a963be3",
   "metadata": {},
   "source": [
    "# Regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6568fb1b-f5e4-4aa0-af6e-357b52e71d88",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'relife.models'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mrelife\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodels\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ProportionalHazard, Weibull, Gompertz\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mrelife\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdatasets\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m load_insulator_string\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'relife.models'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from relife.models import ProportionalHazard, Weibull, Gompertz\n",
    "from relife.datasets import load_insulator_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dfac3a2-7fa4-4a75-8de2-d7ea1a479d56",
   "metadata": {},
   "outputs": [],
   "source": [
    "cp = 1\n",
    "cf = 5\n",
    "discounting_rate = 0.05\n",
    "\n",
    "time, event, entry, *covar = load_insulator_string()\n",
    "print(time)\n",
    "print(covar)\n",
    "covar = np.column_stack(covar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ff70deb-267b-4f05-9192-a48c683db4c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "distrib = Weibull(5, 0.03)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c71eee4e-1ceb-42b5-a792-afb840823a83",
   "metadata": {},
   "outputs": [],
   "source": [
    "ProportionalHazard(distrib, (1, 2, 3)).hf(2, np.random.random((10, 3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd706afa-3a23-42d3-bf4c-3918e2f9b955",
   "metadata": {},
   "outputs": [],
   "source": [
    "ph = ProportionalHazard(Gompertz()).fit(time, covar, event=event, entry=entry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6ffba91-d437-4d61-86d9-5adcc1c159a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot hazard function for some individuals\n",
    "i, j, k = 12, 1073, 7999\n",
    "t = np.linspace(0, 200, num=1000)\n",
    "plt.plot(t, ph.hf(t, covar)[i], label=\"Individu i\")\n",
    "plt.plot(t, ph.hf(t, covar)[j], label=\"Individu j\")\n",
    "plt.plot(t, ph.hf(t, covar)[k], label=\"Individu k\")\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Fonction de défaillance\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a102b46-deef-40ef-bf93-b98fa3ba7855",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot survival functions of some individuals\n",
    "plt.plot(t, ph.sf(t, covar)[i], label=\"Individu i\")\n",
    "plt.plot(t, ph.sf(t, covar)[j], label=\"Individu j\")\n",
    "plt.plot(t, ph.sf(t, covar)[k], label=\"Individu k\")\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Fonction de survie\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1c73881-09c7-4303-9841-6a8ab50c33e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "distri = ph.get_distribution(covar[[i, j, k]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26b653f3-e04e-4217-bf43-5d8f4875c741",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(t, distri.sf(t)[0], label=\"Individu i\")\n",
    "plt.plot(t, distri.sf(t)[1], label=\"Individu j\")\n",
    "plt.plot(t, distri.sf(t)[2], label=\"Individu k\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00df3ee9-fbbb-4953-8f0e-a1b6b7d25181",
   "metadata": {},
   "outputs": [],
   "source": [
    "from relife.models import LeftTruncatedModel\n",
    "\n",
    "left_truncated_distri = LeftTruncatedModel(distri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53ca3aff-e9e0-44da-baa0-94b53675dc31",
   "metadata": {},
   "outputs": [],
   "source": [
    "a0 = np.array([30, 30, 30]).reshape(-1,1)\n",
    "plt.plot(t, left_truncated_distri.sf(t, a0)[0], label=\"Individu i\")\n",
    "plt.plot(t, left_truncated_distri.sf(t, a0)[1], label=\"Individu j\")\n",
    "plt.plot(t, left_truncated_distri.sf(t, a0)[2], label=\"Individu k\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beb72533-93e1-46bd-8881-5ea7c268738e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from relife.models import AgeReplacementModel\n",
    "\n",
    "ar_distri = AgeReplacementModel(distri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d3e8096-cff1-4b6a-a2f3-d7a4a056be6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ar = np.array([75, 75, 75]).reshape(-1,1)\n",
    "plt.plot(t, ar_distri.sf(t, ar)[0], label=\"Individu i\")\n",
    "plt.plot(t, ar_distri.sf(t, ar)[1], label=\"Individu j\")\n",
    "plt.plot(t, ar_distri.sf(t, ar)[2], label=\"Individu k\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76147a0c-9797-45e3-bcd0-4ca28ae7487c",
   "metadata": {},
   "source": [
    "## Politique de remplacement par âge dans un modèle à covariables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "478036d5-f8a4-419c-bc2d-81a638fb25f0",
   "metadata": {},
   "source": [
    "Il est possible de fitter une politique de remplacement par âge d'après un modèle proportionnel. Il suffit de passer les covariables dans l'argument `model_args` de la classe AgeReplacementPolicy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94648dda-7c45-4b04-b4d8-82dcbc95962b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculons la politique et l'âge de remplacement pour les individus i, j, k définis ci-dessus:\n",
    "policy_ph = AgeReplacementPolicy(\n",
    "    ph, cf, cp, discounting_rate=discounting_rate, model_args=(covar[[i, j, k]],), nb_assets=3\n",
    ").fit()\n",
    "print(policy_ph.ar)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
